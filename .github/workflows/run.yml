name: Ejecutar cada 2 horas

on:
  schedule:
    # A las 05:55, 07:55, …, 23:55 UTC
    - cron: '55 5-23/2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  packages: read

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Python 3.11
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Instalar dependencias de Python
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Instalar poppler-utils
      - name: Instalar poppler-utils
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils

      # 5. Verificar que los Secrets codificados estén presentes y no vacíos
      - name: Verificar secretos codificados
        shell: bash
        env:
          CLIENT_SECRET_JSON_B64: ${{ secrets.CLIENT_SECRET_JSON_B64 }}
          SERVICE_ACCOUNT_JSON_B64: ${{ secrets.SERVICE_ACCOUNT_JSON_B64 }}
          GMAIL_TOKEN_PICKLE_B64: ${{ secrets.GMAIL_TOKEN_PICKLE_B64 }}
        run: |
          echo "Bytes de CLIENT_SECRET_JSON_B64: $(echo -n "$CLIENT_SECRET_JSON_B64" | wc -c)"
          echo "Bytes de SERVICE_ACCOUNT_JSON_B64: $(echo -n "$SERVICE_ACCOUNT_JSON_B64" | wc -c)"
          echo "Bytes de GMAIL_TOKEN_PICKLE_B64: $(echo -n "$GMAIL_TOKEN_PICKLE_B64" | wc -c)"
          for v in CLIENT_SECRET_JSON_B64 SERVICE_ACCOUNT_JSON_B64 GMAIL_TOKEN_PICKLE_B64; do
            if [ -z "${!v}" ]; then
              echo "ERROR: Secret '$v' no definido o vacío"
              exit 1
            fi
          done

      # 6. Reconstruir ficheros de credenciales desde los Secrets codificados
      - name: Reconstruir client_secret.json
        run: |
          printf '%s' "${{ secrets.CLIENT_SECRET_JSON_B64 }}" | base64 --decode > client_secret.json

      - name: Reconstruir orquestrador-459013-90b46b746190.json
        run: |
          printf '%s' "${{ secrets.SERVICE_ACCOUNT_JSON_B64 }}" | base64 --decode > orquestrador-459013-90b46b746190.json

      - name: Reconstruir token.pickle de Gmail
        run: |
          printf '%s' "${{ secrets.GMAIL_TOKEN_PICKLE_B64 }}" | base64 --decode > token.pickle

      # 7. Comprobar que los ficheros no están vacíos
      - name: Comprobar ficheros de credenciales
        run: |
          echo "Tamaños de ficheros de credenciales:"
          ls -lh client_secret.json orquestrador-459013-90b46b746190.json token.pickle
          for f in client_secret.json orquestrador-459013-90b46b746190.json token.pickle; do
            if [ ! -s "$f" ]; then
              echo "ERROR: $f está vacío o no existe"
              exit 1
            fi
          done

      # 8. Ejecutar el script principal
      - name: Ejecutar main.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python -m src.main

      # 9. Subir los resultados como artifacts
      - name: Subir artifacts
        uses: actions/upload-artifact@v4
        with:
          name: datos-y-logs
          path: |
            data/02_TransformedData
            data/03_Outputs
            data/04_Logs